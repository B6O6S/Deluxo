-- Variables for storing GUI state
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local screenGui = playerGui:FindFirstChild("MyScreenGui")

-- Create the ScreenGui if it doesn't exist
if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MyScreenGui"
    screenGui.Parent = playerGui
end

-- Create the ImageButton if it doesn't exist
local button = screenGui:FindFirstChild("MyButton")

if not button then
    button = Instance.new("ImageButton")
    button.Name = "MyButton"
    button.Size = UDim2.new(0, 40, 0, 40) -- Slightly smaller size (40x40 pixels)
    button.BackgroundTransparency = 1 -- Make the background transparent
    button.Image = "rbxassetid://106403617359782" -- Your decal ID

    -- Add UICorner to make it circular
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.5, 0) -- Fully rounded corners
    uiCorner.Parent = button

    button.Parent = screenGui
end

-- Create a Sound instance
local sound = Instance.new("Sound")
sound.SoundId = "rbxassetid://4499400560" -- Your sound asset ID
sound.Volume = 1 -- Adjust volume (1 is full volume)
sound.Looped = false -- Set to true if you want the sound to loop
sound.Parent = button

-- Function to save and load button position
local function saveButtonPosition()
    local buttonPosition = button.Position
    player:SetAttribute("ButtonPosition", buttonPosition)
end

local function loadButtonPosition()
    local savedPosition = player:GetAttribute("ButtonPosition")
    if savedPosition then
        button.Position = savedPosition
    else
        -- Default position if no saved position
        button.Position = UDim2.new(0.5, -20, 0.5, -20)
    end
end

-- Load the button position when the GUI is first created
loadButtonPosition()

-- Make the button draggable
local dragging = false
local dragStart
local startPos

local function onDragStart(input)
    dragging = true
    dragStart = input.Position
    startPos = button.Position
end

local function onDrag(input)
    if dragging then
        local delta = input.Position - dragStart
        button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end

local function onDragEnd()
    dragging = false
    saveButtonPosition() -- Save the position when dragging ends
end

-- Handle mouse and touch input for dragging
button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        onDragStart(input)
    end
end)

button.InputChanged:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
        onDrag(input)
    end
end)

button.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        onDragEnd()
    end
end)

-- Function to execute when the button is clicked
local function onButtonClick()
    getgenv().keytoclick = "K"

    local vim = game:GetService("VirtualInputManager")

    local keyPressed = false  -- Flag to control key press
    local characterAddedHandled = false  -- Flag to check if character added was handled

    -- Function to send key press event
    local function sendKeyPress()
        if not keyPressed then
            vim:SendKeyEvent(true, getgenv().keytoclick, false, game)
            vim:SendKeyEvent(false, getgenv().keytoclick, false, game)  -- Release the key to avoid holding it down
            keyPressed = true  -- Set the flag to true after the first key press
        end
    end

    -- Function to handle character addition
    local function onCharacterAdded(character)
        if not characterAddedHandled then
            sendKeyPress()
            characterAddedHandled = true  -- Set the flag to true after the first character addition
        end
    end

    -- Connect character added event
    player.CharacterAdded:Connect(onCharacterAdded)

    -- Initialize flags and handle initial character
    if player.Character then
        onCharacterAdded(player.Character)
    end
    
    -- Play the sound effect
    sound:Play()
end

-- Connect the function to the button's click event
button.MouseButton1Click:Connect(onButtonClick)
